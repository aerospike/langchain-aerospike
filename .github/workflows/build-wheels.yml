name: Build and Release

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:  # Allow manual triggering
    inputs:
      version:
        description: 'If this is a release what version is this for? If this is a pre-release what version are you developing toward?'
        required: true
        type: string

env:
  JFROG_CLI_BUILD_NAME: 'langchain-aerospike'
  JFROG_CLI_LOG_LEVEL: DEBUG
  JFROG_CLI_BUILD_PROJECT: 'vector'
  ARTIFACT_NAME: 'langchain-aerospike'

jobs:
  build:
    name: Build and Create Release
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
      with:
        python-version: '3.10'

    - name: Install Poetry
      uses: snok/install-poetry@76e04a911780d5b312d89783f7b1cd627778900a # v1.4.1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: setup jfrog
      uses: jfrog/setup-jfrog-cli@f748a0599171a192a2668afee8d0497f7c1069df # v4.5.6       
      env:
        JF_URL: https://aerospike.jfrog.io
        JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}
        JF_PROJECT: ${{ env.JFROG_CLI_BUILD_PROJECT }}

    - name: Install dependencies
      run: |
        poetry install --no-interaction

    - name: Get version from tag
      id: get_version
      run: |
          # Default to version from workflow_dispatch or tag
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual build: Use version input
            TAG="${{ inputs.version }}"

            echo "Triggered manually with version: ${TAG}"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # Push event: Extract tag from GITHUB_REF
            TAG=${GITHUB_REF#refs/tags/}
            echo "Triggered by push with tag: ${TAG}"
          else
            echo "Unsupported event: ${{ github.event_name }}"
            exit 1
          fi

          # Remove "v" prefix to get the version
          VERSION=${TAG#v}

          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

    - name: Build package
      run: |
        poetry build --no-interaction

    - name: List package files
      run: |
        ls -la dist/

    - name: Upload builds to JFrog
      run: |
          for file in *; do
            jf rt upload "$file" "${{env.JFROG_CLI_BUILD_PROJECT}}-pypi-dev-local/${{env.ARTIFACT_NAME}}/${{steps.get_version.outputs.VERSION}}/" \
                --build-name="${{ env.JFROG_CLI_BUILD_NAME }}" --build-number="${{steps.get_version.outputs.VERSION}}" --project="${{env.JFROG_CLI_BUILD_PROJECT}}"
          done
          jfrog rt build-collect-env "${{ env.JFROG_CLI_BUILD_NAME }}" "${{steps.get_version.outputs.VERSION}}" --project="${{env.JFROG_CLI_BUILD_PROJECT}}"
          jfrog rt build-add-git "${{ env.JFROG_CLI_BUILD_NAME }}" "${{steps.get_version.outputs.VERSION}}" --project="${{env.JFROG_CLI_BUILD_PROJECT}}"
          jfrog rt build-publish "${{ env.JFROG_CLI_BUILD_NAME }}" "${{steps.get_version.outputs.VERSION}}" --project="${{env.JFROG_CLI_BUILD_PROJECT}}"
      working-directory: ./dist

    - name: Create Release Bundle
      run: |
          
          echo '{
          
              "name": "${{ env.JFROG_CLI_BUILD_NAME }}",
              "version": "${{ steps.get_version.outputs.VERSION }}",
              "description": "Release bundle for ${{github.repository}} version ${{ steps.get_version.outputs.VERSION }}",
              "files": [
                {
                  "project": "${{env.JFROG_CLI_BUILD_PROJECT}}",
                  "build":  "${{ env.JFROG_CLI_BUILD_NAME }}"
                }
              ]
            }' > release-bundle-spec.json
            cat release-bundle-spec.json

          jf release-bundle-create \
            "${{ env.JFROG_CLI_BUILD_NAME }}" "${{ steps.get_version.outputs.VERSION }}"\
            --project ${{ env.JFROG_CLI_BUILD_PROJECT }} \
            --spec release-bundle-spec.json \
            --signing-key aerospike --sync
