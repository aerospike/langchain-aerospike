name: Build and Release

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:  # Allow manual triggering
    inputs:
      version:
        description: 'If this is a release what version is this for? If this is a pre-release what version are you developing toward?'
        required: true
        type: string

env:
  JFROG_CLI_BUILD_NAME: 'langchain-aerospike'
  JFROG_CLI_LOG_LEVEL: DEBUG
  JFROG_CLI_BUILD_PROJECT: 'vector'
  ARTIFACT_NAME: 'langchain-aerospike'

jobs:
  build:
    name: Build and Create Release
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        jf poetry install --no-interaction --no-root

    - name: Get version from tag
      id: get_version
      run: |
          # Default to version from workflow_dispatch or tag
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual build: Use version input
            TAG="${{ inputs.version }}"

            echo "Triggered manually with version: ${TAG}"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # Push event: Extract tag from GITHUB_REF
            TAG=${GITHUB_REF#refs/tags/}
            echo "Triggered by push with tag: ${TAG}"
          else
            echo "Unsupported event: ${{ github.event_name }}"
            exit 1
          fi

          # Remove "v" prefix to get the version
          VERSION=${TAG#v}

          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

    - name: Build package
      run: |
        jf poetry build --no-interaction --build-name="${{ env.JFROG_CLI_BUILD_NAME }}-macos" --build-number="${{steps.get_version.outputs.VERSION}}" --project="${{env.JFROG_CLI_BUILD_PROJECT}}"

    - name: List package files
      run: |
        ls -la dist/
        

    - name: setup jfrog
      uses: jfrog/setup-jfrog-cli@f748a0599171a192a2668afee8d0497f7c1069df # v4.5.6       
      env:
        JF_URL: https://aerospike.jfrog.io
        JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}
        JF_PROJECT: ${{ env.JFROG_CLI_BUILD_PROJECT }}

    - name: "Upload builds to JFrog"
      run: |
          for file in dist/; do
            if [[ "$file" == *.whl || "$file" == *.tar.gz ]]; then
              jf rt upload "$file" "${{env.JFROG_CLI_BUILD_PROJECT}}-pypi-dev-local/${{env.ARTIFACT_NAME}}/${{steps.get_version.outputs.VERSION}}/" \
                  --build-name="${{ env.JFROG_CLI_BUILD_NAME }}" --build-number="${{steps.get_version.outputs.VERSION}}" --project="${{env.JFROG_CLI_BUILD_PROJECT}}"
            else
              echo "Skipping upload of $file as it does not match *.whl or *.tar.gz"
            fi
          done
          jfrog rt build-collect-env "${{ env.JFROG_CLI_BUILD_NAME }}" "${{steps.get_version.outputs.VERSION}}" --project="${{env.JFROG_CLI_BUILD_PROJECT}}"
          jfrog rt build-add-git "${{ env.JFROG_CLI_BUILD_NAME }}" "${{steps.get_version.outputs.VERSION}}" --project="${{env.JFROG_CLI_BUILD_PROJECT}}"
          jfrog rt build-publish "${{ env.JFROG_CLI_BUILD_NAME }}" "${{steps.get_version.outputs.VERSION}}" --project="${{env.JFROG_CLI_BUILD_PROJECT}}"
